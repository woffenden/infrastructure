---
name: Cloud Platform Tenant - Container Platform

on:
  pull_request:
    branches:
      - main
    paths:
      - terraform/aws/cloud-platform-tenants/container-platform/**
  push:
    branches:
      - main
    paths:
      - terraform/aws/cloud-platform-tenants/container-platform/**

permissions: read-all

jobs:
  terraform-plan:
    if: github.ref != 'refs/heads/main'
    name: Plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: terraform/aws/cloud-platform-tenants/container-platform
    strategy:
      fail-fast: false
      matrix:
        environment: ["development", "production"]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Configure AWS Credentials
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::749019155605:role/github-actions

      - name: Install Terraform
        id: install_terraform
        uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: latest

      - name: Prepare Terraform
        id: prepare_terraform
        shell: bash
        run: |
          echo "TF_IN_AUTOMATION=true" >>"${GITHUB_ENV}"

      - name: Initialise Terraform
        id: initialise_terraform
        shell: bash
        run: |
          terraform init -upgrade -input=false -no-color

      - name: Terraform Workspace
        id: terraform_workspace
        shell: bash
        run: |
          terraform workspace select -or-create container-platform-${{ matrix.environment }} -no-color

      - name: Terraform Plan
        id: terraform_plan
        shell: bash
        run: |
          terraform plan -out=${{ matrix.environment }}.tfplan -input=false -no-color

          terraform show -json ${{ matrix.environment }}.tfplan > ${{ matrix.environment }}.tfplan.json

      - name: Evaluate Terraform Plan
        id: evaluate_terraform_plan
        shell: bash
        run: |
          bash -x "${GITHUB_WORKSPACE}/scripts/terraform/plan-evaluator.sh" ${{ matrix.environment }}.tfplan.json

      - name: Check Approvers
        id: check_approvers
        if: ${{ steps.evaluate_terraform_plan.outputs.resources_found == 'true' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.WOFFENDEN_BOT_GITHUB_TOKEN }}
          script: |
            const orgName = 'woffenden';
            const teamSlug = 'cloud-platform';

            const {data: reviews} = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const {data: team_members} = await github.rest.teams.listMembersInOrg({
              org: orgName,
              team_slug: teamSlug
            });

            const teamMemberLogins = team_members.map(member => member.login);
            const approved = reviews.some(review => review.state === 'APPROVED' && teamMemberLogins.includes(review.user.login));

            if (approved) {
              core.notice('Pull request approved by a member of @woffenden/cloud-platform');
            } else {
              core.setFailed('Terraform plan evalaution detected changes to resources that require approval from a member of @woffenden/cloud-platform');
            }

      - name: Comment if Pull Request Isn't Approved
        id: comment_if_not_approved
        if: failure() && steps.check_approvers.outcome == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          MATRIX_ENVIRONMENT: ${{ matrix.environment }}
        with:
          github-token: ${{ secrets.WOFFENDEN_BOT_GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const matrixEnvironment = process.env.MATRIX_ENVIRONMENT;

            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: context.payload.pull_request.number,
              body: `@${context.actor} Terraform plan evalaution detected changes to resources in ${matrixEnvironment} that require approval from a member of @woffenden/cloud-platform`
            });

  terraform-apply-non-production:
    if: github.ref != 'refs/heads/main'
    needs: [terraform-plan]
    name: Apply Non-Production
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: terraform/aws/cloud-platform-tenants/container-platform
    strategy:
      matrix:
        environment: ["development"]
    environment:
      name: "container-platform-${{ matrix.environment }}"
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Configure AWS Credentials
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::749019155605:role/github-actions

      - name: Install Terraform
        id: install_terraform
        uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: latest

      - name: Prepare Terraform
        id: prepare_terraform
        shell: bash
        run: |
          echo "TF_IN_AUTOMATION=true" >>"${GITHUB_ENV}"

      - name: Initialise Terraform
        id: initialise_terraform
        shell: bash
        run: terraform init -upgrade -input=false -no-color

      - name: Terraform Workspace
        id: terraform_workspace
        shell: bash
        run: |
          terraform workspace select -or-create container-platform-${{ matrix.environment }} -no-color

      - name: Terraform Plan
        id: terraform_plan
        shell: bash
        run: |
          terraform plan -out=${{ matrix.environment }}.tfplan -input=false -no-color

      - name: Terraform Apply
        id: terraform_apply
        shell: bash
        run: |
          terraform apply -auto-approve -input=false ${{ matrix.environment }}.tfplan -no-color

  terraform-plan-production:
    if: github.ref == 'refs/heads/main'
    name: Plan Production
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: terraform/aws/cloud-platform-tenants/container-platform
    strategy:
      matrix:
        environment: ["production"]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Configure AWS Credentials
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::749019155605:role/github-actions

      - name: Install Terraform
        id: install_terraform
        uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: latest

      - name: Prepare Terraform
        id: prepare_terraform
        shell: bash
        run: |
          echo "TF_IN_AUTOMATION=true" >>"${GITHUB_ENV}"

      - name: Initialise Terraform
        id: initialise_terraform
        shell: bash
        run: terraform init -upgrade -input=false -no-color

      - name: Terraform Workspace
        id: terraform_workspace
        shell: bash
        run: |
          terraform workspace select -or-create container-platform-${{ matrix.environment }} -no-color

      - name: Terraform Plan
        id: terraform_plan
        shell: bash
        run: |
          terraform plan -out=${{ matrix.environment }}.tfplan -input=false -no-color

  terraform-apply-production:
    if: github.ref == 'refs/heads/main'
    needs: [terraform-plan-production]
    name: Apply Production
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: terraform/aws/cloud-platform-tenants/container-platform
    strategy:
      matrix:
        environment: ["production"]
    environment:
      name: "container-platform-${{ matrix.environment }}"
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Configure AWS Credentials
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::749019155605:role/github-actions

      - name: Install Terraform
        id: install_terraform
        uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: latest

      - name: Prepare Terraform
        id: prepare_terraform
        shell: bash
        run: |
          echo "TF_IN_AUTOMATION=true" >>"${GITHUB_ENV}"

      - name: Initialise Terraform
        id: initialise_terraform
        shell: bash
        run: terraform init -upgrade -input=false -no-color

      - name: Terraform Workspace
        id: terraform_workspace
        shell: bash
        run: |
          terraform workspace select -or-create container-platform-${{ matrix.environment }} -no-color

      - name: Terraform Plan
        id: terraform_plan
        shell: bash
        run: |
          terraform plan -out=${{ matrix.environment }}.tfplan -input=false -no-color

      - name: Terraform Apply
        id: terraform_apply
        shell: bash
        run: |
          terraform apply -auto-approve -input=false ${{ matrix.environment }}.tfplan -no-color
