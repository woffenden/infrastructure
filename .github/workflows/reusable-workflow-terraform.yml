---
on:
  workflow_call:
    inputs:
      component:
        required: true
        type: string
      terraform-version:
        required: false
        type: string
        default: latest

jobs:
  determine-workflow-mode:
    name: Determine Workflow Mode
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ steps.determine_mode.outputs.mode }}
    steps:
      - name: Determine Mode
        id: determine_mode
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "mode=Apply" >>"${GITHUB_OUTPUT}"
          else
            echo "mode=Plan" >>"${GITHUB_OUTPUT}"
          fi

  terraform:
    needs: [determine-workflow-mode]
    name: ${{ needs.determine-workflow-mode.outputs.mode }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Prepare Environment
        id: prepare_environment
        run:
          workingDirectory=$(yq -e ".${{ inputs.component }}" .github/workflows/path-filter/terraform.yml | sed 's/.\{3\}$//')
          export workingDirectory

          cloudProvider=$(jq -r '.cloud_provider' ${workingDirectory}/config.json)
          export cloudProvider

          echo "working-directory=${workingDirectory}" >>"${GITHUB_ENV}"
          echo "cloud-provider=${cloudProvider}" >>"${GITHUB_ENV}"

          if [[ "${cloudProvider}" == "aws" ]]; then
            awsRegion=$(jq -r '.aws.region' ${workingDirectory}/config.json)
            export awsRegion

            awsRoleToAssume=$(jq -r '.aws.role_to_assume' ${workingDirectory}/config.json)
            export awsRoleToAssume

            echo "aws-region=${awsRegion}" >>"${GITHUB_ENV}"
            echo "aws-role-to-assume=${awsRoleToAssume}" >>"${GITHUB_ENV}"
          fi

          if [[ "${cloudProvider}" == "google" ]]; then
            googleWorkloadIdentityPool=$(jq -r '.google.workload_identity_pool' ${workingDirectory}/config.json)
            export googleWorkloadIdentityPool

            googleServiceAccount=$(jq -r '.google.service_account' ${workingDirectory}/config.json)
            export googleServiceAccount

            echo "google-workload-identity-pool=${googleWorkloadIdentityPool}" >>"${GITHUB_ENV}"
            echo "google-service-account=${googleServiceAccount}" >>"${GITHUB_ENV}"
          fi

      - name: Configure AWS Credentials
        if: ${{ env.cloud-provider == 'aws' }}
        id: configure_aws_credentials
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: ${{ env.aws-role-to-assume }}

      - name: Configure Google Credentials
        if: ${{ env.cloud-provider == 'google' }}
        id: configure_google_credentials
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 # v1.1.1
        with:
          workload_identity_provider: ${{ env.google-workload-identity-pool }}
          service_account: ${{ env.google-service-account }}

      - name: Install Terraform
        id: install_terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Prepare Terraform
        id: prepare_terraform
        shell: bash
        run: |
          echo "TF_IN_AUTOMATION=true" >>"${GITHUB_ENV}"

      - name: Initialise Terraform
        id: initialise_terraform
        run: terraform init -upgrade -no-color
        working-directory: ${{ env.working-directory }}

      - name: Validate Terraform
        id: validate_terraform
        shell: bash
        run: terraform validate -no-color
        working-directory: ${{ env.working-directory }}

      - name: Plan Terraform
        id: plan_terraform
        shell: bash
        run: terraform plan -input=false -no-color
        working-directory: ${{ env.working-directory }}

      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        id: apply_terraform
        shell: bash
        run: terraform apply -input=false -auto-approve -no-color
        working-directory: ${{ env.working-directory }}
